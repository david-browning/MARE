#line 1 "C:\\Users\\david\\OneDrive\\Programming\\MARE\\CompilerWin\\SourceLexer.cpp"

#line 3 "C:\\Users\\david\\OneDrive\\Programming\\MARE\\CompilerWin\\SourceLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 3
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

    #define yyalloc yyalloc

    #define yyrealloc yyrealloc

    #define yyfree yyfree

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::streambuf* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int SourceLexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 63
#define YY_END_OF_BUFFER 64
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[181] =
    {   0,
        0,    0,   64,   62,   59,   59,   59,   62,   62,   42,
       62,   34,   35,   40,   43,   27,   44,   28,   41,   53,
       53,   30,   29,   46,   45,   47,   58,   58,   58,   58,
       36,   31,   37,   48,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   32,   33,   61,    0,
       57,   52,    0,   38,   39,   60,    0,   53,    0,   53,
       58,   58,   58,   58,   26,   58,   58,   58,   58,   58,
       13,   58,   58,   58,   58,   58,    7,   58,   10,   58,
       58,   49,   58,   58,   58,   56,   60,   55,   53,   58,
       58,   58,   58,   50,   58,   58,   58,   58,   58,   58,

        9,   58,   58,   58,   58,   51,   58,   58,   58,   58,
       54,   58,   58,   22,   58,   58,   58,   58,   58,   58,
        8,   58,   58,   14,   58,   58,   58,   58,   58,   58,
       23,   58,   58,   11,   58,   58,    4,    5,   58,   58,
       58,   17,   58,   58,   58,   12,   58,   58,    6,   19,
       58,   58,   58,   58,   58,   20,   58,    3,   58,   58,
       58,   58,   15,   58,   18,    1,   58,   58,   58,   58,
        2,   58,   58,   58,   16,   58,   24,   21,   25,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    7,    1,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   18,
       18,   19,   18,   20,   18,   18,   18,   21,   22,   23,
       24,   25,    1,    1,   26,   27,   27,   28,   29,   30,
       31,   32,   33,   34,   34,   35,   34,   34,   34,   36,
       34,   37,   38,   39,   40,   34,   41,   42,   34,   34,
       43,   44,   45,   46,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   57,   64,   65,   66,   67,   57,   57,   68,
       57,   57,   69,    1,   70,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[71] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    1,    1
    } ;

static const flex_int16_t yy_base[187] =
    {   0,
        0,    0,  182,  861,  179,  861,  861,  168,    0,  861,
        0,  861,  861,  861,  158,  861,  148,  861,  145,   56,
       62,  861,  861,  861,  861,  861,   66,   70,   74,   84,
      861,  861,  861,  861,   91,   95,   99,  109,  113,  117,
      122,  126,  130,  134,  140,  148,  861,  861,  153,  120,
      118,    0,  114,  861,  861,    0,  160,  182,  186,  861,
        0,  200,  204,  209,  213,  217,  224,  228,  232,  241,
      236,  245,  249,  253,  258,  263,  268,  273,  277,  281,
      290,  298,  308,  312,  316,  861,    0,  323,  333,  337,
      347,  366,  370,  374,  379,  383,  387,  391,  396,  400,

      404,  411,  416,  420,  424,  443,  450,  459,  463,  467,
      861,  471,  475,  479,  484,  488,  497,  501,  507,  514,
      519,  523,  530,  534,  101,  538,  547,  542,  551,  557,
      564,  568,  573,  593,  600,  604,  609,  613,  617,  621,
       59,  625,  629,  633,  637,  641,  650,  655,  665,  672,
      682,   86,  686,  691,   33,  695,  699,  703,  707,  711,
      715,   50,  727,  731,    0,  737,  743,  750,  758,   29,
      762,  766,  776,  782,    0,  792,  796,  800,  804,  861,
      848,  851,  854,   75,  857,   69
    } ;

static const flex_int16_t yy_def[187] =
    {   0,
      180,    1,  180,  180,  180,  180,  180,  181,  182,  180,
      183,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  184,  184,  184,  184,
      180,  180,  180,  180,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  180,  180,  180,  181,
      181,  182,  180,  180,  180,  185,  180,  180,  180,  180,
      186,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  180,  185,  180,  180,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,

      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      180,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  186,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      186,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  186,  184,  184,  186,  184,  184,  184,  184,  184,
      184,  186,  184,  184,  186,  184,  184,  184,  184,  186,
      184,  184,  184,  184,  186,  184,  184,  184,  184,    0,
      180,  180,  180,  180,  180,  180
    } ;

static const flex_int16_t yy_nxt[932] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,   19,   20,   21,   21,   21,
       22,   23,   24,   25,   26,   27,   27,   27,   27,   28,
       27,   27,   27,   27,   27,   29,   27,   27,   30,   27,
       27,   27,   31,   32,   33,   34,   35,   36,   37,   38,
       27,   39,   40,   27,   27,   41,   27,   27,   27,   27,
       42,   43,   44,   45,   27,   27,   46,   27,   47,   48,
       57,   61,   58,   58,   58,   58,   57,   62,   58,   58,
       58,   58,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,  175,   63,  170,   59,  165,   64,

       61,   61,   61,   61,  162,  155,   65,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  141,
       66,   86,   51,   60,   51,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   67,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   49,   68,   61,   61,   61,   61,
       56,   55,   69,   70,   61,   61,   61,   61,   71,   54,
       72,   73,   51,   74,   77,   75,   88,   88,   88,   88,
       49,  180,   78,   76,  180,  180,   79,   80,  180,  180,
      180,   84,   81,   82,  180,  180,   57,   83,   58,   58,

       58,   58,   89,   89,   89,   89,  180,  180,   85,  180,
      180,   89,   89,   89,   89,   89,   61,   61,   61,   61,
       61,   61,   61,   61,  180,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,  180,   90,   91,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   92,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   93,   61,   61,   61,   61,   94,   61,
       61,   61,   61,   95,   61,   61,   61,   61,   96,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       61,  180,  180,  101,   97,   98,   61,   61,   61,   61,
      180,   99,  180,  100,   61,   61,   61,   61,  180,  102,
      180,  180,  104,  103,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,  180,  180,  105,   88,
       88,   88,   88,  180,  180,  180,  106,  180,  107,   89,
       89,   89,   89,   61,   61,   61,   61,  180,   89,   89,
       89,   89,   89,   61,   61,   61,   61,  180,  180,  108,
      180,  180,  180,  111,  112,  113,  180,  109,  180,  180,
      180,  110,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,  114,   61,   61,   61,   61,   61,

       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,  180,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,  180,  180,  116,   61,   61,   61,
       61,  115,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,  125,  180,  180,  117,  180,  180,  118,
      180,  121,  180,  180,  180,  119,  120,  180,  122,   61,
       61,   61,   61,  180,  180,  123,   61,   61,   61,   61,
      126,  180,  180,  180,  124,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,  131,

       61,   61,   61,   61,   61,   61,   61,   61,  127,  180,
      180,  180,  128,   61,   61,   61,   61,   61,   61,   61,
       61,  132,  130,   61,   61,   61,   61,  180,  180,  129,
       61,   61,   61,   61,  133,   61,   61,   61,   61,   61,
       61,   61,   61,  135,  180,  134,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,  136,   61,   61,   61,   61,   61,   61,   61,
       61,  180,  137,   61,   61,   61,   61,  180,  180,  138,
       61,   61,   61,   61,   61,   61,   61,   61,  139,   61,
       61,   61,   61,  143,  180,  140,  180,  180,  180,  147,

      180,  180,  180,  142,  180,  144,  180,  180,  148,   61,
       61,   61,   61,  180,  145,  146,   61,   61,   61,   61,
       61,   61,   61,   61,  149,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,  152,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,  180,  180,  153,  180,  150,   61,   61,   61,   61,
      151,   61,   61,   61,   61,  180,  154,  180,  159,  180,
      157,   61,   61,   61,   61,  180,  180,  160,   61,   61,
       61,   61,  180,  180,  156,  180,  180,  158,   61,   61,

       61,   61,   61,   61,   61,   61,  180,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,  180,  180,  180,  168,  167,
      180,  180,  161,   61,   61,   61,   61,   61,   61,   61,
       61,  163,  164,   61,   61,   61,   61,  180,  166,   61,
       61,   61,   61,  180,  180,  169,   61,   61,   61,   61,
      180,  180,  180,  172,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,  180,  180,  173,  180,
      180,  171,   61,   61,   61,   61,  180,  176,   61,   61,

       61,   61,  180,  180,  174,  180,  180,  177,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,  180,  180,  180,  180,  180,  180,
      179,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  178,   50,  180,
       50,   52,  180,   52,   53,  180,   53,   87,  180,   87,
        3,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,

      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180
    } ;

static const flex_int16_t yy_chk[932] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       20,  186,   20,   20,   20,   20,   21,  184,   21,   21,
       21,   21,   27,   27,   27,   27,   28,   28,   28,   28,
       29,   29,   29,   29,  170,   28,  162,   20,  155,   29,

       30,   30,   30,   30,  152,  141,   29,   35,   35,   35,
       35,   36,   36,   36,   36,   37,   37,   37,   37,  125,
       30,   53,   51,   20,   50,   38,   38,   38,   38,   39,
       39,   39,   39,   40,   40,   40,   40,   35,   41,   41,
       41,   41,   42,   42,   42,   42,   43,   43,   43,   43,
       44,   44,   44,   44,   49,   36,   45,   45,   45,   45,
       19,   17,   37,   38,   46,   46,   46,   46,   38,   15,
       38,   39,    8,   39,   41,   40,   57,   57,   57,   57,
        5,    3,   41,   40,    0,    0,   41,   42,    0,    0,
        0,   45,   42,   43,    0,    0,   58,   44,   58,   58,

       58,   58,   59,   59,   59,   59,    0,    0,   46,    0,
        0,   59,   59,   59,   59,   59,   62,   62,   62,   62,
       63,   63,   63,   63,    0,   64,   64,   64,   64,   65,
       65,   65,   65,   66,   66,   66,   66,    0,   63,   64,
       67,   67,   67,   67,   68,   68,   68,   68,   69,   69,
       69,   69,   71,   71,   71,   71,   66,   70,   70,   70,
       70,   72,   72,   72,   72,   73,   73,   73,   73,   74,
       74,   74,   74,   67,   75,   75,   75,   75,   68,   76,
       76,   76,   76,   69,   77,   77,   77,   77,   70,   78,
       78,   78,   78,   79,   79,   79,   79,   80,   80,   80,

       80,    0,    0,   74,   72,   72,   81,   81,   81,   81,
        0,   72,    0,   73,   82,   82,   82,   82,    0,   75,
        0,    0,   78,   76,   83,   83,   83,   83,   84,   84,
       84,   84,   85,   85,   85,   85,    0,    0,   78,   88,
       88,   88,   88,    0,    0,    0,   80,    0,   81,   89,
       89,   89,   89,   90,   90,   90,   90,    0,   89,   89,
       89,   89,   89,   91,   91,   91,   91,    0,    0,   83,
        0,    0,    0,   88,   90,   91,    0,   84,    0,    0,
        0,   85,   92,   92,   92,   92,   93,   93,   93,   93,
       94,   94,   94,   94,   92,   95,   95,   95,   95,   96,

       96,   96,   96,   97,   97,   97,   97,   98,   98,   98,
       98,    0,   99,   99,   99,   99,  100,  100,  100,  100,
      101,  101,  101,  101,    0,    0,   95,  102,  102,  102,
      102,   93,  103,  103,  103,  103,  104,  104,  104,  104,
      105,  105,  105,  105,    0,    0,   96,    0,    0,   97,
        0,  100,    0,    0,    0,   98,   99,    0,  102,  106,
      106,  106,  106,    0,    0,  103,  107,  107,  107,  107,
      105,    0,    0,    0,  104,  108,  108,  108,  108,  109,
      109,  109,  109,  110,  110,  110,  110,  112,  112,  112,
      112,  113,  113,  113,  113,  114,  114,  114,  114,  112,

      115,  115,  115,  115,  116,  116,  116,  116,  107,    0,
        0,    0,  108,  117,  117,  117,  117,  118,  118,  118,
      118,  113,  110,  119,  119,  119,  119,    0,    0,  109,
      120,  120,  120,  120,  115,  121,  121,  121,  121,  122,
      122,  122,  122,  117,    0,  116,  123,  123,  123,  123,
      124,  124,  124,  124,  126,  126,  126,  126,  128,  128,
      128,  128,  118,  127,  127,  127,  127,  129,  129,  129,
      129,    0,  119,  130,  130,  130,  130,    0,    0,  120,
      131,  131,  131,  131,  132,  132,  132,  132,  122,  133,
      133,  133,  133,  127,    0,  123,    0,    0,    0,  132,

        0,    0,    0,  126,    0,  128,    0,    0,  132,  134,
      134,  134,  134,    0,  129,  130,  135,  135,  135,  135,
      136,  136,  136,  136,  133,  137,  137,  137,  137,  138,
      138,  138,  138,  139,  139,  139,  139,  140,  140,  140,
      140,  142,  142,  142,  142,  143,  143,  143,  143,  144,
      144,  144,  144,  145,  145,  145,  145,  146,  146,  146,
      146,    0,    0,  139,    0,  135,  147,  147,  147,  147,
      136,  148,  148,  148,  148,    0,  140,    0,  147,    0,
      144,  149,  149,  149,  149,    0,    0,  148,  150,  150,
      150,  150,    0,    0,  143,    0,    0,  145,  151,  151,

      151,  151,  153,  153,  153,  153,    0,  154,  154,  154,
      154,  156,  156,  156,  156,  157,  157,  157,  157,  158,
      158,  158,  158,  159,  159,  159,  159,  160,  160,  160,
      160,  161,  161,  161,  161,    0,    0,    0,  160,  159,
        0,    0,  151,  163,  163,  163,  163,  164,  164,  164,
      164,  153,  154,  166,  166,  166,  166,    0,  157,  167,
      167,  167,  167,    0,    0,  161,  168,  168,  168,  168,
        0,    0,    0,  167,  169,  169,  169,  169,  171,  171,
      171,  171,  172,  172,  172,  172,    0,    0,  168,    0,
        0,  164,  173,  173,  173,  173,    0,  172,  174,  174,

      174,  174,    0,    0,  169,    0,    0,  173,  176,  176,
      176,  176,  177,  177,  177,  177,  178,  178,  178,  178,
      179,  179,  179,  179,    0,    0,    0,    0,    0,    0,
      176,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  174,  181,    0,
      181,  182,    0,  182,  183,    0,  183,  185,    0,  185,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,

      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[64] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
    0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "SourceLexer.l"
#line 2 "SourceLexer.l"

#include "SourceScanner.h"
#include <mare_iatom.h>
#include <mare_compiler_functions.h>
#include <mare_operator.h>

using namespace std;

#undef YY_DECL
#define YY_DECL int SourceScanner::yylex(yy::SourceParser::semantic_type* const lval, \
													  yy::SourceParser::location_type* location)

using TOKENS = yy::SourceParser::token;

#define yyterminate() return( TOKENS::END_TOKEN )

#define YY_NO_UNISTD_H

#define YY_USER_ACTION loc->step(); loc->columns(yyleng);

#line 719 "C:\\Users\\david\\OneDrive\\Programming\\MARE\\CompilerWin\\SourceLexer.cpp"
#line 720 "C:\\Users\\david\\OneDrive\\Programming\\MARE\\CompilerWin\\SourceLexer.cpp"

#define INITIAL 0

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (int)(result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin.rdbuf(std::cin.rdbuf());

		if ( ! yyout )
			yyout.rdbuf(std::cout.rdbuf());

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 28 "SourceLexer.l"



#line 32 "SourceLexer.l"
	yylval = lval;

	
	/* Keywords */
#line 858 "C:\\Users\\david\\OneDrive\\Programming\\MARE\\CompilerWin\\SourceLexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 181 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 861 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 36 "SourceLexer.l"
return TOKENS::K_PROGRAM;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 37 "SourceLexer.l"
return TOKENS::K_FUNCTION;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 38 "SourceLexer.l"
return TOKENS::K_RETURN;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 39 "SourceLexer.l"
return TOKENS::K_CONST;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 40 "SourceLexer.l"
return TOKENS::K_COUNT;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 42 "SourceLexer.l"
return TOKENS::K_CODE;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 44 "SourceLexer.l"
return TOKENS::K_IF;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 45 "SourceLexer.l"
return TOKENS::K_ELSE;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 46 "SourceLexer.l"
return TOKENS::K_END;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 48 "SourceLexer.l"
return TOKENS::K_IS;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 50 "SourceLexer.l"
return TOKENS::K_BREAK;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 51 "SourceLexer.l"
return TOKENS::K_UNTIL;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 53 "SourceLexer.l"
return TOKENS::K_CM;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 54 "SourceLexer.l"
return TOKENS::K_INCH;
	YY_BREAK
/* Types */
case 15:
YY_RULE_SETUP
#line 57 "SourceLexer.l"
{
						yylval->Info = &FLOAT32_TYPE_INFO;
						return TOKENS::TYPE;
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 62 "SourceLexer.l"
{
						yylval->Info = &FLOAT64_TYPE_INFO;
						return TOKENS::TYPE;
					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 67 "SourceLexer.l"
{
						yylval->Info = &INT_TYPE_INFO;
						return TOKENS::TYPE;
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 72 "SourceLexer.l"
{
						yylval->Info = &INT64_TYPE_INFO;
						return TOKENS::TYPE;
					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 77 "SourceLexer.l"
{
						yylval->Info = &CHAR_TYPE_INFO;
						return TOKENS::TYPE;
					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 82 "SourceLexer.l"
{
						yylval->Info = &NULL_TYPE_INFO;
						return TOKENS::TYPE;
					}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 86 "SourceLexer.l"
return TOKENS::K_COMPOUND;
	YY_BREAK
/* Constants */
case 22:
YY_RULE_SETUP
#line 91 "SourceLexer.l"
{
						yylval->Lit = &TRUE_LITERAL;
						return TOKENS::CONSTANT;
					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 96 "SourceLexer.l"
{
						yylval->Lit = &FALSE_LITERAL;
						return TOKENS::CONSTANT;
					}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 101 "SourceLexer.l"
{
						auto lit = GetPageWidthLiteral();
						yylval->Lit = lit;
						return TOKENS::CONSTANT;
					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 107 "SourceLexer.l"
{
						auto lit = GetPageHeightLiteral();
						yylval->Lit = lit;
						return TOKENS::CONSTANT;
					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 113 "SourceLexer.l"
{
						yylval->Lit = &PI_LITERAL;
						return TOKENS::LITERAL;
					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 118 "SourceLexer.l"
return TOKENS::COMMA;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 119 "SourceLexer.l"
return TOKENS::PERIOD;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 120 "SourceLexer.l"
return TOKENS::SEMICOLON;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 121 "SourceLexer.l"
return TOKENS::COLON;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 122 "SourceLexer.l"
return TOKENS::SLASH_B;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 123 "SourceLexer.l"
return TOKENS::BRACE_L;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 124 "SourceLexer.l"
return TOKENS::BRACE_R;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 125 "SourceLexer.l"
return TOKENS::PARENTH_L;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 126 "SourceLexer.l"
return TOKENS::PARENTH_R;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 127 "SourceLexer.l"
return TOKENS::BRACKET_L;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 128 "SourceLexer.l"
return TOKENS::BRACKET_R;
	YY_BREAK
/* Operators */
case 38:
YY_RULE_SETUP
#line 131 "SourceLexer.l"
{
						yylval->Op = &Operator(INCREMENT_OPERATOR);
						return TOKENS::INCREMENT;
					}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 135 "SourceLexer.l"
{
						yylval->Op = &DECREMENT_OPERATOR;
						return TOKENS::DECREMENT;
					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 139 "SourceLexer.l"
{
						yylval->Op = &MULTIPLY_OPERATOR;
						return TOKENS::STAR;
					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 143 "SourceLexer.l"
{
						yylval->Op = &DIVIDE_OPERATOR;
						return TOKENS::SLASH_F;
					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 147 "SourceLexer.l"
{
						yylval->Op = &MODULO_OPERATOR;
						return TOKENS::PERCENT;
					}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 151 "SourceLexer.l"
{
						yylval->Op = &ADD_OPERATOR;
						return TOKENS::PLUS;
					}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 155 "SourceLexer.l"
{
						yylval->Op = &SUBTRACT_OPERATOR;
						return TOKENS::MINUS;
					}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 159 "SourceLexer.l"
{
						yylval->Op = &EQUALS_OPERATOR;
						return TOKENS::EQUALS;
					}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 163 "SourceLexer.l"
{
						yylval->Op = &LT_OPERATOR;
						return TOKENS::ANGLE_L;
					}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 167 "SourceLexer.l"
{
						yylval->Op = &GT_OPERATOR;
						return TOKENS::ANGLE_R;
					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 171 "SourceLexer.l"
{
						yylval->Op = &HAT_OPERATOR;
						return TOKENS::HAT;
					}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 175 "SourceLexer.l"
{
						yylval->Op = &NOT_OPERATOR;
						return TOKENS::K_OR;
					}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 179 "SourceLexer.l"
{	
						yylval->Op = &AND_OPERATOR;
						return TOKENS::K_AND;
					}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 183 "SourceLexer.l"
{
						yylval->Op = &NOT_OPERATOR;
						return TOKENS::K_NOT;
					}
	YY_BREAK
/* Compilation Modifiers */
case 52:
YY_RULE_SETUP
#line 191 "SourceLexer.l"
;
	YY_BREAK
/* Literals */
case 53:
YY_RULE_SETUP
#line 194 "SourceLexer.l"
{
						int64_t number = stoi(yytext);
						yylval->Lit = new Literal(INT_TYPE_INFO_C, &number, sizeof(number));
						return TOKENS::LITERAL;
					}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 200 "SourceLexer.l"
{
						double number = std::stod(yytext);
						yylval->Lit = new Literal(FLOAT64_TYPE_INFO, &number, sizeof(number));
						return TOKENS::LITERAL;
					}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 206 "SourceLexer.l"
{
						float number = (float)std::stod(yytext);
						yylval->Lit = new Literal(FLOAT32_TYPE_INFO, &number, sizeof(number));
						return TOKENS::LITERAL;
					}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 212 "SourceLexer.l"
{
						auto c = yytext[1];
						yylval->Lit = new Literal(CHAR_TYPE_INFO_C, &c, sizeof(c));
						return TOKENS::LITERAL;
					}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 218 "SourceLexer.l"
{
						auto s = TrimQuotations(yytext);
						yylval->Lit = new Literal(STRING_TYPE_INFO_C, s.c_str(), s.size());
						return TOKENS::LITERAL;
					}
	YY_BREAK
/* Variables */
case 58:
YY_RULE_SETUP
#line 225 "SourceLexer.l"
{
						yylval->Str = new std::string(yytext);
						return TOKENS::ID;
					}
	YY_BREAK
/* stuff to ignore */
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 231 "SourceLexer.l"
;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 232 "SourceLexer.l"
;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 233 "SourceLexer.l"
;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 234 "SourceLexer.l"
std::cerr << "Unexpected symbol " << yytext << " at line " << yylineno << std::endl;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 235 "SourceLexer.l"
return TOKENS::END_TOKEN;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 237 "SourceLexer.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1352 "C:\\Users\\david\\OneDrive\\Programming\\MARE\\CompilerWin\\SourceLexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin.rdbuf();
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 * This constructor simply maintains backward compatibility.
 * DEPRECATED
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout ):
	yyin(arg_yyin ? arg_yyin->rdbuf() : std::cin.rdbuf()),
	yyout(arg_yyout ? arg_yyout->rdbuf() : std::cout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream& arg_yyin, std::ostream& arg_yyout ):
	yyin(arg_yyin.rdbuf()),
	yyout(arg_yyout.rdbuf())
{
	ctor_common();
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::ctor_common()
{
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = NULL;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream& new_in, std::ostream& new_out )
{
	// was if( new_in )
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );

	// was if( new_out )
	yyout.rdbuf(new_out.rdbuf());
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if( ! new_in ) {
		new_in = &yyin;
	}

	if ( ! new_out ) {
		new_out = &yyout;
	}

	switch_streams(*new_in, *new_out);
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin.eof() || yyin.fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin.get( buf[0] );

	if ( yyin.eof() )
		return 0;

	if ( yyin.bad() )
		return -1;

	return 1;

#else
	(void) yyin.read( buf, max_size );

	if ( yyin.bad() )
		return -1;
	else
		return yyin.gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout.write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,(yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,(yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 181 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 181 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 180);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
    void yyFlexLexer::yyunput( int c, char* yy_bp)
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
#endif

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream& input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Delegate to the new version that takes an istream reference.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart( std::istream* input_file )
{
	yyrestart( *input_file );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin.rdbuf(YY_CURRENT_BUFFER_LVALUE->yy_input_file);
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream& file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc((yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Delegate creation of buffers to the new version that takes an istream reference.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
	YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	return yy_create_buffer( *file, size );
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream& file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = (&file == 0) ? NULL : file.rdbuf();
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( const char* msg )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 237 "SourceLexer.l"


