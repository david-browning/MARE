#module
#using "standard.mare"

function null_t Rectangle(float_t x, float_t y, float_t w, float_t h):
	__code "^Rectangle($x, $y, $w, $h)";
end function

function null_t Square(float_t x, float_t y, float_t w):
	Rectangle(x, y, w, w);
end function

function null_t Ellipse(float_t x, float_t y, float_t w, float_t h):
	__code "^Ellipse($x, $y, $w, $h)";
end function

function null_t Circle(float_t x, float_t y, float_t r):
	Ellipse(x, y, r, r);
end function

function null_t Polygon(float_t[] xPositions, float_t[] yPositions ):
	int_t vertCount = count xPositions;

	__code "float* xFirst_p = &$xPositions[0]";
	__code "float* yFirst_p = &$yPositions[0]";
	__code "^Polygon(xFirst_p, yFirst_p, $vertCount)";
end function

function null_t FilledRectangle(float_t x, float_t y, float_t w, float_t h):
	__code "^FilledRectangle($x, $y, $w, $h)";
end function

function null_t FilledSquare(float_t x, float_t y, float_t w):
	FilledRectangle(x, y, w, w);
end function

function null_t FilledEllipse(float_t x, float_t y, float_t w, float_t h):
	__code "^FilledEllipse($x, $y, $w, $h)";
end function

function null_t FilledCircle(float_t x, float_t y, float_t r):
	FilledEllipse(x, y, r, r);
end function

function null_t FilledPolygon(float_t[] xPositions, float_t[] yPositions ):
	int_t vertCount = count xPositions;

	__code "float* xFirst_p = &$xPositions[0]";
	__code "float* yFirst_p = &$yPositions[0]";
	__code "^FilledPolygon(xFirst_p, yFirst_p, $vertCount)";
end function